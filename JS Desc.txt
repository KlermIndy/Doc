- Array
	- Map
	const numbers = [35, 23, 17, 21]
	const result = numbers.map((number) => {
  		return number*2
	})
	console.log(result) // [70, 46, 24, 42]

	-Filter
	const numbers = [35, 23, 17, 21, 35]
	const result = filter(number => number == 35)
	console.log(result) // [35, 35]

	-Find
	const numbers = [35, 23, 17, 21, 35]
	const result = find(number => number == 35)
	console.log(result) // 35

	-Every & Some
	const numbers = [35, 23, 17, 21, 35]
	const result = every(number => number == 35)
	console.log(result) // false
	const result = some(number => number == 35)
	console.log(result) // true

	-Reduce
	const numbers = [10, 20, 30, 40]
	const result = numbers.reduce((sum,number) => {
  		return sum+number
	}, 0)
	console.log(result) // 100
	
	- Set to empty
		let sampleArray = ['foo', 'bar', 'zeta'];
		sampleArray.length = 0; // sampleArray becomes []

	- Use spread/rest operator
		let first = ['foo', 'bar'];
		let second = ['other foo', ...first, 'other bar'];
		// ['other foo', 'foo', 'bar', 'other bar'

- if() return
	- false, 0, null, NaN, undifined

- Convert
	- To string
		const val = String(input)
		const val = input + '' good perfomance
	- To int
		const val = Number(input)
		const val = input >> 0 (bitshift 32 bit but number has 64 bit, Max is 2147483647) good perfomance
- Declear
	- use let or cons instead var
	- Use && and || (let a = '' || 'foo'; // 'foo', let b = undefined || 'foo'; // 'foo')
- Compare
	- use === instead ==
- Regular Expression
	- Password pattern matching
		let re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W).{8,}$/g // Contain a-z, A_Z, Number, at least, 8 characters
	- Smart Character Replacement
		let camelRE = /([A-Z])/g
		let phrase = "thisIsACamelCaseString"
		console.log(phrase.replace(camelRE, " $1")// this Is A Camel Case String
